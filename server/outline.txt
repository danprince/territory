Lobby
* Player Joined (player:join)
* Player Disconnected (player:disconnect)
* Player Chose Size (player:size)
* Room Created (room:create)

Room
* Player Disconncted (player:disconnect)
* Player Moved (player:move)
* Player Scored (player:score)
* Player Stuck (player:stuck)
* Player Lost (player:lost)
* Player Won (player:won)
* Player Chat (player:chat)
* Player Updated (player:update)
* Tile Updated (tile:update)

Game Flow
-Players Initialized
-Player Cycle
  -Is player stuck? (< 3 turns or no empty neighbours)
  -While turns left
    -Place piece
    -Update score and turns
    -Is player stuck?
      -If 2 players
        -Opponent wins
      -If > 2 players
        -Player lost
    -Is board full?
-Game Over
  -Determine Winner

function nextTurn() {
  this.ticks += 1;
  this.turn = this.ticks % this.players.length;
  this.player = this.players[this.turn];

  // if this player has lost
  if(this.player.lost) {
    nextTurn();
  }

  // player stuck
  if(this.player.moves < 3 && this.conditions.stuck(this.player)) {

  }

  // update all players
  this.room.emit('player:update', this.player);
  this.room.emit('game:turn', this.turn);
}

function start(size, sockets) {
  // Initialize players
  this.room = sockets.map(createPlayer);
  this.board = new Board(size);

  this.room.all(function(player) {
    player.socket.on('player:act', act.bind(room, player));
    player.socket.on('player:chat', chat.bind(room, player));
  });

  this.room.emit('game:init', {
  });
}

function setTile(player, x, y) {
  player.moves -= 1;
  player.score += 1;
  this.board.set(x, y, player.id);

  this.room.emit('player:update', player);

  if(player.moves <= 0) {
    nextTurn();
  }
}

function act(player, x, y) {
  var conditions = new Conditions(player, x, y),
      target = this.players[this.board.at(x, y)];

  if(!conditions.neighbouring() || this.ticks > players.length) {
    // invalid location
  } else {

    if(conditions.open()) {
      this.setTile(player, x, y);
    }

    else if(conditions.opponent()) {
      if(player.moves >= 3) {
        target.score -= 1;
        player.moves -= 2; // penalty
        this.setTile(player, x, y);
      } else {
        // you need 3 to occupy
      }
    }

    else if(conditions.own()) {
      // you can't take your own tile
    }
  }

}

function chat(player, message) {
  this.room.emit('chat', {
    time: Date.now(),
    body: message
  });
}
